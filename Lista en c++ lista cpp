#include "ListaEnlazada.h"
#include<iostream>

ListaEnlazada:: ListaEnlazada(){
	primero = nullptr;
	ultimo = nullptr;
}
void ListaEnlazada::agregarAnimal(string nombre, string habitat, string estado) {
	Nodo* nuevonodo = new Nodo(n, habitat, estado);
	if (primero == NULL) {
		primero = nuevonodo;
		ultimo = nuevonodo;
	}
	else {
		ultimo->siguiente = nuevonodo;// el puntero siguiente del ultimo apunta al nuevo nodo
		ultimo = nuevonodo;//el nuevo nodo es el puntero al ultimo 
	}
}
void ListaEnlazada::eliminarAnimal(string nombre) {
	Nodo* actual = primero;
	Nodo* anterior = nullptr;
	while (actual != nullptr && actual->nombre != nombre)
	{
		anterior = actual;
		actual = actual->siguiente;
	}
	//Encuentre el animal o llego a nullptr
	if (actual == nullptr) {
		cout << "No se encuentra el animal en la lista" << endl;
		return;
	}
	if (actual == primero) {
		primero = primero->siguiente;

	}
	else {
		anterior->siguiente = actual->siguiente;
	}
	delete actual;// si queremos eliminar el nodo fisicamente 
	cout << "El animal ha sido eliminado de la lista " << endl;
}
void ListaEnlazada::buscarAnimal(string nombre) {
	Nodo* actual = primero;
	while (actual != NULL) {
		if (actual->nombre == nombre) {
			cout << "Nombre: " << actual->nombre;
			cout << "Habitat: " << actual->habitat; 
		    cout << "Estado: " << actual->estadoConservacion; 
			return;
		}
		actual = actual->siguiente;
	}
	cout << "Animal no econtrado";
}
void ListaEnlazada::mostrarLista() {
	Nodo* actual = primero;
	cout << "Lista de animales: " << endl;
	while (actual != NULL) {

		cout << "Nombre: " << actual->nombre;
		cout << "Habitat: " << actual->habitat;
		cout << "Estado: " << actual->estadoConservacion;

		actual = actual->siguiente;
	}
}
};
